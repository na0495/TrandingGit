{"version":3,"sources":["reportWebVitals.js","utils/axios.js","redux/slices/git.js","redux/rootReducer.js","redux/store.js","components/Main.jsx","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","axiosInstance","axios","create","interceptors","response","use","error","Promise","reject","data","slice","createSlice","name","initialState","isLoading","gitData","pureData","errorMessage","reducers","startLoading","state","hasError","action","payload","getGitDataSucces","rootReducer","combineReducers","git","gitReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","useReduxSelector","useStyles","makeStyles","theme","root","padding","margin","width","square","color","backgroundColor","height","box1","borderRadius","box2","marginRight","marginLeft","Main","classes","dispatch","useDispatch","useSelector","useEffect","a","actions","get","items","console","log","Fragment","CssBaseline","Object","entries","map","index","Card","display","alignItems","className","Grid","container","xs","Avatar","variant","src","owner","avatar_url","p","Typography","gutterBottom","description","Box","m","bgcolor","css","stargazers_count","open_issues","fromNow","updated_at","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.113e581d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from 'axios';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst axiosInstance = axios.create();\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => Promise.reject((error.response && error.response.data) || 'Something went wrong')\r\n);\r\n\r\nexport default axiosInstance;","import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from '../../utils/axios';\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    error: false,\r\n    gitData: [],\r\n    pureData: [],\r\n    errorMessage: '',\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: 'git',\r\n    initialState,\r\n    reducers: {\r\n        startLoading(state) {\r\n            state.isLoading = true;\r\n          },\r\n        hasError(state, action) {\r\n            state.isLoading = false;\r\n            state.error = action.payload;\r\n          },\r\n        getGitDataSucces(state, action) {\r\n            state.isLoading = false;\r\n            state.gitData = action.payload.gitData;\r\n            state.pureData = action.payload.pureData;\r\n        }\r\n    }\r\n})\r\n\r\nexport default slice.reducer;\r\n\r\nexport function getGitData() {\r\n    return async (dispatch) => {\r\n      dispatch(slice.actions.startLoading());\r\n      try {\r\n        const response = await axios.get('https://api.github.com/search/repositories?q=created:%3E2017-10-22&sort=stars&order=desc');\r\n        const gitData = response.data;\r\n        const pureData = gitData.items;\r\n        dispatch(slice.actions.getGitDataSucces({pureData}));\r\n      } catch (error) {\r\n        dispatch(slice.actions.hasError(error));\r\n      }\r\n    };\r\n  }","import { combineReducers } from 'redux';\r\nimport gitReducer from './slices/git';\r\n\r\nconst rootReducer = combineReducers({\r\n    git: gitReducer,\r\n  });\r\n  \r\n  export { rootReducer };","import { useDispatch as useReduxDispatch, useSelector as useReduxSelector } from 'react-redux';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n//\r\nimport { rootReducer } from './rootReducer';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: false,\r\n    immutableCheck: false\r\n  })\r\n});\r\n\r\nconst useSelector = useReduxSelector;\r\n\r\nconst useDispatch = () => useReduxDispatch();\r\n\r\nexport { store, useSelector, useDispatch };","import React, { useEffect } from 'react';\r\nimport { Typography, CssBaseline, Avatar, Box, Card, Grid} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getGitData } from '../redux/slices/git';\r\nimport Moment from 'react-moment';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: 25,\r\n        margin: 25,\r\n        width: 800,\r\n    },\r\n    square: {\r\n      color: 'white',\r\n      backgroundColor: 'green',\r\n      width: 170,\r\n      height: 170\r\n    },\r\n    box1: {\r\n      color: 'white',\r\n      backgroundColor: '#bdbdbd',\r\n      padding: 15,\r\n      width: 125,\r\n      borderRadius: 7\r\n    },\r\n    box2: {\r\n      color: 'black',\r\n      backgroundColor: '#fff176',\r\n      marginRight: 10,\r\n      marginLeft: 10,\r\n      padding: 15,\r\n      width: 125,\r\n      borderRadius: 7\r\n    },\r\n  }));\r\n\r\nexport default function Main() {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const { pureData } = useSelector((state) => state.git)\r\n    useEffect(() => {\r\n        dispatch(getGitData())\r\n    }, [dispatch])\r\n    console.log(pureData)\r\n    return (\r\n        <React.Fragment>\r\n          <CssBaseline />\r\n          {Object.entries(pureData).map((data, index) => (\r\n            <Card\r\n              display=\"flex\"\r\n              alignItems=\"flex-start\"\r\n              className={classes.root}\r\n              key={index}\r\n              >\r\n              <Grid container>\r\n                <Grid xs={4}>\r\n                  <Avatar variant=\"square\" src={data[1].owner.avatar_url} className={classes.square}/>\r\n                </Grid>\r\n                <Grid xs={8} p={25}>\r\n                  <Typography variant=\"h4\" gutterBottom>\r\n                    {data[1].name}\r\n                  </Typography>\r\n                  <Typography variant=\"subtitle1\" gutterBottom>\r\n                    {data[1].description}\r\n                  </Typography>\r\n                  <Box\r\n                    display=\"flex\"\r\n                    alignItems=\"flex-start\"\r\n                    p={1}\r\n                    m={1}\r\n                    bgcolor=\"background.paper\"\r\n                    css={{ height: 100 }}\r\n                    >\r\n                      <Box display=\"flex\" className={classes.box1}>\r\n                          stars : {data[1].stargazers_count}\r\n                      </Box>\r\n                      <Box  display=\"flex\" className={classes.box2}>\r\n                          issues : {data[1].open_issues}\r\n                      </Box>\r\n                      <Typography variant=\"subtitle1\" gutterBottom>\r\n                          this repo was last time updated <Moment fromNow>{data[1].updated_at}</Moment>.\r\n                      </Typography>\r\n                  </Box>\r\n                </Grid>\r\n              </Grid>\r\n            </Card>\r\n          ))\r\n        }\r\n        </React.Fragment>\r\n    )\r\n}","import Main from './components/Main'\r\n\r\nexport default function App() {\r\n  return (\r\n    <>\r\n      <Main/>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ReduxProvider store={store}>\r\n      <App/>\r\n    </ReduxProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}